/**
 *  Connection.h
 *
 *  Class representing a connection to a MySQL or MariaDB daemon
 *
 *  @copyright 2014 Copernica BV
 */

/**
 *  Set up namespace
 */
namespace React { namespace MySQL {

// forward declaration
class Statement;

/**
 *  Connection class
 */
class Connection
{
private:
    /**
     *  Connection to mysql
     */
    MYSQL *_connection;

    /**
     *  The worker operating on MySQL
     */
    Worker _worker;

    /**
     *  Worker for main thread
     */
    Worker _master;
public:
    /**
     *  Establish a connection to mysql
     *
     *  @param  loop        the loop to bind to
     *  @param  hostname    the hostname to connect to
     *  @param  username    the username to login with
     *  @param  password    the password to authenticate with
     *  @param  database    the database to use
     *  @param  flags       connection flags
     */
    Connection(Loop *loop, const std::string& hostname, const std::string &username, const std::string& password, const std::string& database, uint64_t flags = CLIENT_IGNORE_SIGPIPE | CLIENT_MULTI_STATEMENTS);

    /**
     *  Establish a connection to mysql
     *
     *  @param  loop        the loop to bind to
     *  @param  hostname    the hostname to connect to
     *  @param  username    the username to login with
     *  @param  password    the password to authenticate with
     *  @param  database    the database to use
     *  @param  callback    the callback to inform once the connection is established or failed
     */
    Connection(Loop *loop, const std::string& hostname, const std::string &username, const std::string& password, const std::string& database, const std::function<void(Connection *connection, const char *error)>& callback, uint64_t flags = CLIENT_IGNORE_SIGPIPE | CLIENT_MULTI_STATEMENTS);

    /**
     *  Destructor
     */
    virtual ~Connection();

    /**
     *  Execute a query
     *
     *  @param  query       the query to execute
     *  @param  callback    the callback to inform for all the result sets generated by the query
     */
    void query(const std::string& query, const std::function<void(Result&& result, const char *error)>& callback);

    /**
     *  Execute a query
     *
     *  This function does not report on whether the query was successfully executed,
     *  nor does it provide any result sets. This is only useful for insert, update
     *  and delete queries where you don't care about the result or where you are
     *  executing queries as part of a transaction.
     *
     *  @param  query       the query to execute
     */
    void query(const std::string& query);

    /**
     *  Friends and family
     */
    friend class Statement;
};

/**
 *  End namespace
 */
}}
