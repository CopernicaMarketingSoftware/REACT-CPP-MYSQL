/**
 *  Connection.cpp
 *
 *  Class representing a connection to a MySQL or MariaDB daemon
 *
 *  @copyright 2014 Copernica BV
 */

#include "includes.h"

/**
 *  Set up namespace
 */
namespace React { namespace MySQL {

/**
 *  Establish a connection to mysql
 *
 *  @param  loop        the loop to bind to
 *  @param  hostname    the hostname to connect to
 *  @param  username    the username to login with
 *  @param  password    the password to authenticate with
 *  @param  database    the database to use
 */
Connection::Connection(Loop *loop, const std::string& hostname, const std::string &username, const std::string& password, const std::string& database, uint64_t flags) :
    _connection(nullptr),
    _worker(loop),
    _master()
{
    // establish the connection in the worker thread
    _worker.execute([this, hostname, username, password, database, flags]() {
        // initialize connection object
        if ((_connection = mysql_init(nullptr)) == nullptr) return;

        // connect to mysql
        if (mysql_real_connect(_connection, hostname.c_str(), username.c_str(), password.c_str(), database.c_str(), 0, nullptr, flags) == nullptr) return;
    });
}

/**
 *  Establish a connection to mysql
 *
 *  @param  loop        the loop to bind to
 *  @param  hostname    the hostname to connect to
 *  @param  username    the username to login with
 *  @param  password    the password to authenticate with
 *  @param  database    the database to use
 *  @param  callback    the callback to inform once the connection is established or failed
 */
Connection::Connection(Loop *loop, const std::string& hostname, const std::string &username, const std::string& password, const std::string& database, const std::function<void(Connection *connection, const char *error)>& callback, uint64_t flags) :
    _connection(nullptr),
    _worker(loop),
    _master()
{
    // establish the connection in the worker thread
    _worker.execute([this, hostname, username, password, database, callback, flags]() {
        // initialize connection object
        if ((_connection = mysql_init(nullptr)) == nullptr)
        {
            // could not initialize connection object
            _master.execute([this, callback]() { callback(this, mysql_error(_connection)); });
            return;
        }

        // connect to mysql
        if (mysql_real_connect(_connection, hostname.c_str(), username.c_str(), password.c_str(), database.c_str(), 0, nullptr, flags) == nullptr)
        {
            // could not connect to mysql
            _master.execute([this, callback]() { callback(this, mysql_error(_connection)); });
            return;
        }

        // we are connected, signal success to the callback
        _master.execute([this, callback]() { callback(this, nullptr); });
    });
}

/**
 *  Destructor
 */
Connection::~Connection()
{
    // close a possible connection
    if (_connection) mysql_close(_connection);
}

/**
 *  Execute a query
 *
 *  @param  query       the query to execute
 *  @param  callback    the callback to inform for all the result sets generated by the query
 */
void Connection::query(const std::string& query, const std::function<void(Result&& result, const char *error)>& callback)
{
    // execute query in the worker thread
    _worker.execute([this, query, callback]() {
        // run the query, should get zero on success
        if (mysql_query(_connection, query.c_str()))
        {
            // query failed, report to listener
            _master.execute([this, callback]() { callback(Result(nullptr), mysql_error(_connection)); });
            return;
        }

        // process all result sets
        while (true)
        {
            // retrieve result set
            auto *result = mysql_store_result(_connection);
            size_t affectedRows = mysql_affected_rows(_connection);

            // did we get a valid response?
            if (result)
            {
                // create the result and pass it to the listener
                _master.execute([this, callback, result]() { callback(Result(result), nullptr); });
            }
            else if (mysql_field_count(_connection))
            {
                // the query *should* have returned a result, this is an error
                _master.execute([this, callback]() { callback(Result(nullptr), mysql_error(_connection)); });
            }
            else
            {
                // this is a query without a result set (i.e.: update, insert or delete)
                _master.execute([this, callback, affectedRows]() { callback(Result(affectedRows), nullptr); });
            }

            // check whether there are more results
            switch(mysql_next_result(_connection))
            {
                case -1:
                    // all result sets were processed
                    return;
                case 0:
                    // ready for next result
                    continue;
                default:
                    // this is an error
                    _master.execute([this, callback]() { callback(Result(nullptr), mysql_error(_connection)); });
                    return;
            }
        }
    });
}

/**
 *  Execute a query
 *
 *  This function does not report on whether the query was successfully executed,
 *  nor does it provide any result sets. This is only useful for insert, update
 *  and delete queries where you don't care about the result or where you are
 *  executing queries as part of a transaction.
 *
 *  @param  query       the query to execute
 */
void Connection::query(const std::string& query)
{
    // execute query in the worker thread
    _worker.execute([this, query]() {
        // run the query, should get zero on success
        if (mysql_query(_connection, query.c_str())) return;

        // process all result sets
        while (true)
        {
            // retrieve result set
            auto *result = mysql_store_result(_connection);

            // did we get a valid response?
            if (result)
            {
                // then free it, we don't care about the result apparantly
                mysql_free_result(result);
            }

            // check whether there are more results
            if (mysql_next_result(_connection) != 0) break;
        }
    });
}

/**
 *  End namespace
 */
}}
